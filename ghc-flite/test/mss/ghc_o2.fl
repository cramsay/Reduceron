{
main11  = 160;
main12  = (-) 0 160;
main9  = 150;
main10  = (-) 0 150;
main6  = 161;
main7  = (-) 0 161;
main4  = 151;
main5  = (-) 0 151;
lvl  = 1;
fromTo n m = case (<=) n m of { False -> Nil; True -> Cons n (fromTo ((+) n lvl) m) };
sumusumAcc acc ds = case ds of { Nil -> acc; Cons x xs -> sumusumAcc ((+) x acc) xs };
sumAcc eta eta1 = let { sumAcc1 = sumAccLiftA0 } in sumAcc1 eta eta1;
sumAccLiftA0 acc ds = case ds of { Nil -> acc; Cons x xs -> sumAccLiftA0 ((+) x acc) xs };
main3  = 0;
sumusssum xs = sumusumAcc main3 xs;
sum xs = let { sumAcc1 = sumLiftA0 } in sumAcc1 main3 xs;
sumLiftA0 acc ds = case ds of { Nil -> acc; Cons x xs1 -> sumLiftA0 ((+) x acc) xs1 };
mainumax2 m ds = case ds of { Nil -> m; Cons x xs -> case (<=) m x of { False -> mainumax2 m xs; True -> mainumax2 x xs } };
max eta eta1 = let { max1 = maxLiftA0 } in max1 eta eta1;
maxLiftA0 m ds = case ds of { Nil -> m; Cons x xs -> case (<=) m x of { False -> maxLiftA0 m xs; True -> maxLiftA0 x xs } };
maximum ds = case ds of { Nil -> main3; Cons x xs -> max x xs };
append ds ys = case ds of { Nil -> ys; Cons x xs -> Cons x (append xs ys) };
concatMap f ds = case ds of { Nil -> Nil; Cons x xs -> append (f x) (concatMap f xs) };
concatMapussconcatMap sc sc1 sc2 = append (sc2 sc) (concatMap sc2 sc1);
mainussmap sc = case sc of { Nil -> Nil; Cons x xs -> Cons (sumusssum x) (mainussmap xs) };
map f ds = case ds of { Nil -> Nil; Cons x xs -> Cons (f x) (map f xs) };
tails ds = case ds of { Nil -> Nil; Cons x xs -> Cons ds (tails xs) };
initussinit sc sc1 = case sc1 of { Nil -> Nil; Cons y xs -> Cons sc (initussinit y xs) };
init ds = case ds of { Nil -> Nil; Cons x ds1 -> case ds1 of { Nil -> Nil; Cons y xs -> Cons x (initussinit y xs) } };
swinits w = case w of { Nil -> MkTup Nil Nil; Cons y ys -> MkTup w case swinits (initussinit y ys) of { MkTup ww1 ww2 -> Cons ww1 ww2 } };
inits w = case swinits w of { MkTup ww1 ww2 -> Cons ww1 ww2 };
segments xs = case swinits xs of { MkTup ww1 ww2 -> concatMap tails (Cons ww1 ww2) };
mss xs = case swinits xs of { MkTup ww1 ww2 -> case map sum (concatMap tails (Cons ww1 ww2)) of { Nil -> main3; Cons x xs1 -> max x xs1 } };
main2  = case swinits (fromTo main5 main4) of { MkTup ww1 ww2 -> case mainussmap (concatMapussconcatMap ww1 ww2 tails) of { Nil -> main3; Cons x xs -> mainumax2 x xs } };
mainumax1 m ds = case ds of { Nil -> (-) m main2; Cons x xs -> case (<=) m x of { False -> mainumax1 m xs; True -> mainumax1 x xs } };
main1  = case swinits (fromTo main7 main6) of { MkTup ww1 ww2 -> case mainussmap (concatMapussconcatMap ww1 ww2 tails) of { Nil -> (-) main3 main2; Cons x xs -> mainumax1 x xs } };
main8  = case swinits (fromTo main10 main9) of { MkTup ww1 ww2 -> case mainussmap (concatMapussconcatMap ww1 ww2 tails) of { Nil -> main3; Cons x xs -> mainumax2 x xs } };
mainumax m ds = case ds of { Nil -> (+) ((-) m main8) main1; Cons x xs -> case (<=) m x of { False -> mainumax m xs; True -> mainumax x xs } };
main  = case swinits (fromTo main12 main11) of { MkTup ww1 ww2 -> case mainussmap (concatMapussconcatMap ww1 ww2 tails) of { Nil -> (+) ((-) main3 main8) main1; Cons x xs -> mainumax x xs } };
}
