{
main11  = 160;
main12  = -160;
main9  = 150;
main10  = -150;
main6  = 161;
main7  = -161;
main4  = 151;
main5  = -151;
fromTo1  = 1;
fromTo_fromTo n m = case (<=) n m of { _* -> Nil; 1 -> Cons n (fromTo_fromTo ((+) n fromTo1) m) };
swfromTo ww w w1 w2 = let { lvl = fromInteger w fromTo1 } in let { fromTo2 = swfromTo_liftA0 ww fromTo2 w lvl } in fromTo2 w1 w2;
swfromTo_liftA0 ww fromTo2 w lvl n m = case ww n m of { False -> Nil; True -> Cons n (fromTo2 ((+) w n lvl) m) };
fromTo w w1 w2 w3 = case w of { C:Ord ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 -> swfromTo ww4 w1 w2 w3 };
sum_sumAcc acc ds = case ds of { Nil -> acc; Cons x xs -> sum_sumAcc ((+) x acc) xs };
sumAcc eta eta1 = let { sumAcc1 = sumAcc_liftA0 sumAcc1 } in sumAcc1 eta eta1;
sumAcc_liftA0 sumAcc1 acc ds = case ds of { Nil -> acc; Cons x xs -> sumAcc1 ((+) x acc) xs };
main3  = 0;
sum_sssum xs = sum_sumAcc main3 xs;
sum xs = let { sumAcc1 = sum_liftA0 sumAcc1 } in sumAcc1 (fromInteger main3) xs;
sum_liftA0 sumAcc1 acc ds = case ds of { Nil -> acc; Cons x xs1 -> sumAcc1 ((+) x acc) xs1 };
main_max2 m ds = case ds of { Nil -> m; Cons x xs -> case (<=) m x of { _* -> main_max2 m xs; 1 -> main_max2 x xs } };
max eta eta1 = let { max1 = max_liftA0 max1 } in max1 eta eta1;
max_liftA0 max1 m ds = case ds of { Nil -> m; Cons x xs -> case (<=) m x of { False -> max1 m xs; True -> max1 x xs } };
maximum ds = case ds of { Nil -> fromInteger main3; Cons x xs -> max x xs };
append ds ys = case ds of { Nil -> ys; Cons x xs -> Cons x (append xs ys) };
concatMap f ds = case ds of { Nil -> Nil; Cons x xs -> append (f x) (concatMap f xs) };
concatMap_ssconcatMap sc sc1 sc2 = append (sc2 sc) (concatMap sc2 sc1);
main_ssmap sc = case sc of { Nil -> Nil; Cons x xs -> Cons (sum_sssum x) (main_ssmap xs) };
map f ds = case ds of { Nil -> Nil; Cons x xs -> Cons (f x) (map f xs) };
tails ds = case ds of { Nil -> Nil; Cons x xs -> Cons wild (tails xs) };
init_ssinit sc sc1 = case sc1 of { Nil -> Nil; Cons y xs -> Cons sc (init_ssinit y xs) };
init ds = case ds of { Nil -> Nil; Cons x ds1 -> case ds1 of { Nil -> Nil; Cons y xs -> Cons x (init_ssinit y xs) } };
swinits w = case w of { Nil -> (#,#) Nil Nil; Cons y ys -> (#,#) wild case swinits (init_ssinit y ys) of { (#,#) ww1 ww2 -> Cons ww1 ww2 } };
inits w = case swinits w of { (#,#) ww1 ww2 -> Cons ww1 ww2 };
segments xs = case swinits xs of { (#,#) ww1 ww2 -> concatMap tails (Cons ww1 ww2) };
mss xs = case swinits xs of { (#,#) ww1 ww2 -> case map sum (concatMap tails (Cons ww1 ww2)) of { Nil -> fromInteger main3; Cons x xs1 -> max x xs1 } };
main2  = case swinits (fromTo_fromTo main5 main4) of { (#,#) ww1 ww2 -> case main_ssmap (concatMap_ssconcatMap ww1 ww2 tails) of { Nil -> main3; Cons x xs -> main_max2 x xs } };
main_max1 m ds = case ds of { Nil -> (-) m main2; Cons x xs -> case (<=) m x of { _* -> main_max1 m xs; 1 -> main_max1 x xs } };
main1  = case swinits (fromTo_fromTo main7 main6) of { (#,#) ww1 ww2 -> case main_ssmap (concatMap_ssconcatMap ww1 ww2 tails) of { Nil -> (-) main3 main2; Cons x xs -> main_max1 x xs } };
main8  = case swinits (fromTo_fromTo main10 main9) of { (#,#) ww1 ww2 -> case main_ssmap (concatMap_ssconcatMap ww1 ww2 tails) of { Nil -> main3; Cons x xs -> main_max2 x xs } };
main_max m ds = case ds of { Nil -> (+) ((-) m main8) main1; Cons x xs -> case (<=) m x of { _* -> main_max m xs; 1 -> main_max x xs } };
main  = case swinits (fromTo_fromTo main12 main11) of { (#,#) ww1 ww2 -> case main_ssmap (concatMap_ssconcatMap ww1 ww2 tails) of { Nil -> (+) ((-) main3 main8) main1; Cons x xs -> main_max x xs } };
}
